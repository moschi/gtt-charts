using GitLabApiClient;
using GitLabApiClient.Models.Notes.Responses;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace gttcharts.Data
{
    public class GitlabAPIConsumer
    {
        private readonly GitlabAPIOptions options;
        private readonly TimeStringParser timeParser;

        public GitlabAPIConsumer(GitlabAPIOptions options)
        {
            this.options = options;
            this.timeParser = new TimeStringParser(options);
        }

        public async Task<(IEnumerable<Models.Issue> issues, IEnumerable<Models.Record> records)> GetData()
        {
            ConcurrentBag<Models.Issue> issues = new();
            ConcurrentBag<Models.Record> records = new();
            StyledConsoleWriter.WriteInfo($"Calling Gitlab API...");
            var client = new GitLabClient(options.ApiUrl, options.Token);
            StyledConsoleWriter.WriteInfo($"Gettings issues...");
            var issuesList = await client.Issues.GetAllAsync(options.Project, options: o => o.State = GitLabApiClient.Models.Issues.Responses.IssueState.All);
            StyledConsoleWriter.WriteInfo($"Found {issuesList.Count} issues");

            // todo: do we need this parallel run here? Seems like a massive overkill...
            Parallel.ForEach(issuesList, (issue) =>
            {
                issues.Add(new Models.Issue()
                {
                    Closed = issue.ClosedAt.HasValue,
                    CreatedAt = issue.CreatedAt,
                    Iid = issue.Iid,
                    Labels = issue.Labels.Count == 0 ? string.Empty : issue.Labels.Aggregate((a, b) => $"{a},{b}"), // todo: this is stupid, since we split it up again later, fix this when removing EFCore
                    Milestone = issue.Milestone?.Title ?? string.Empty,
                    Spent = (double)issue.TimeStats.TotalTimeSpent / 60 / 60,
                    State = issue.State.ToString(), // todo: is this correct?
                    Title = issue.Title,
                    TotalEstimate = (double)issue.TimeStats.TimeEstimate / 60 / 60,
                    UpdatedAt = issue.UpdatedAt
                });
            });

            foreach (var issue in issues)
            {
                StyledConsoleWriter.WriteInfo($"Getting notes for {issue.Title}");
                var notesList = await client.Issues.GetNotesAsync(options.Project, issue.Iid);
                // process notes generated by system
                Parallel.ForEach(notesList.Where(n => n.System == true), (note) =>
                {
                    if (note.Body.Contains("time spent"))
                    {
                        var timeData = timeParser.GetSpentHours(note);
                        records.Add(new Models.Record()
                        {
                            Date = timeData.date,
                            Iid = issue.Iid,
                            Time = timeData.hours,
                            Type = note.NoteableType,
                            User = note.Author.Username // todo: change this when removing EFCore and reworking Models
                        });
                    }
                    else if (note.Body.Contains("changed time estimate"))
                    {
                        // todo: do we need this somewhere? possibly for future 'change list' of issues?
                    }
                });
            }

            return (issues, records);
        }

        public async Task TestQuery()
        {
            var client = new GitLabClient(options.ApiUrl, options.Token);

            var issuesList = await client.Issues.GetAllAsync(options.Project, options: o => o.State = GitLabApiClient.Models.Issues.Responses.IssueState.All);

            foreach (var issue in issuesList)
            {
                Console.WriteLine($"{issue.Iid}: {issue.Title}");
                await GetNotes(issue.Iid);
                Console.WriteLine();
            }
        }

        private async Task GetNotes(int issue_iid)
        {
            var client = new GitLabClient(options.ApiUrl, options.Token);

            var notes = await client.Issues.GetNotesAsync(options.Project, issue_iid, o => o.Order = GitLabApiClient.Models.Notes.Requests.NoteOrder.CreatedAt);

            // todo: use regex here or is that enought?
            PrintSpentTime(notes.Where(n => n.System && n.Body.Contains("time spent")));
            PrintEstimatedTime(notes.Where(n => n.System && n.Body.Contains("changed time estimate")));
        }

        private void PrintSpentTime(IEnumerable<Note> spentTimeNotes)
        {
            string regex = "(?:added )(?<spent>.*)(?: of time spent at)(?<spentat>.*)";
            var rgx = new Regex(regex);

            foreach (var note in spentTimeNotes)
            {
                var match = rgx.Match(note.Body);
                double parsedHours = timeParser.GetSpentHours(note).Item2;
                Console.WriteLine($"actual spent: {match.Groups["spent"]}, parsed value: {parsedHours} hours");
            }
        }

        private void PrintEstimatedTime(IEnumerable<Note> estimateTimeNotes)
        {
            string regex = "(?:changed time estimate to )(?<estimate>.*)";
            var rgx = new Regex(regex);

            foreach (var note in estimateTimeNotes)
            {
                var match = rgx.Match(note.Body);
                double parsedHours = timeParser.GetEstimateHours(note);
                Console.WriteLine($"actual estimate: {match.Groups["estimate"]}, parsed value: {parsedHours} hours");
            }
        }
    }
}
